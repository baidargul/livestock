generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Demands {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Info
  type          String
  breed         String
  averageAge    Float? // Age in years or months, adjust accordingly
  ageUnit       String?
  averageWeight Float? // Weight in kilograms or pounds
  weightUnit    String?
  colorMarkings String? // Optional: Color and specific markings

  // Commercial Info
  maleQuantityAvailable   Int?
  femaleQuantityAvailable Int?
  city                    String
  province                String
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  password      String?
  province      String?
  city          String?
  phone         String?
  profileImage  Json?
  coverImage    Json?
  balance       Float?        @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  connectionIds String[]      @default([])
  animals       Animal[] // Relation to Animal
  sessions      Sessions[] // Relation to Sessions
  bids          Bids[] // Relation to Bids
  bidRooms      BidRoom[] // Relation to BidRoom
  bidRoomAuthor BidRoom[]     @relation("BidRoomAuthor") // Rooms created by this user
  demands       Demands[]
  contactBooks  ContactBook[] @relation("UserContactBook") // Contact books related to this user

  @@index([name]) // Index for efficient queries
  @@index([name, email]) // Composite index for name and email
  @@map("users") // Map to a different collection name if needed
}

model ContactBook {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId // ID of the user who created the contact
  author    User?    @relation("UserContactBook", fields: [authorId], references: [id])
  userId    String   @db.ObjectId // ID of the user this contact belongs to
  remarks   String? // Optional remarks for the contact
  favourite Boolean  @default(false) // Whether this contact is a favorite
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Animal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Info
  type          String
  breed         String
  averageAge    Float? // Age in years or months, adjust accordingly
  ageUnit       String?
  averageWeight Float? // Weight in kilograms or pounds
  weightUnit    String?
  colorMarkings String? // Optional: Color and specific markings

  // Commercial Info
  price                   Float
  priceUnit               String?
  maleQuantityAvailable   Int?
  femaleQuantityAvailable Int?
  city                    String
  province                String
  deliveryOptions         DeliveryOptions[]
  title                   String?
  description             String?
  allowBidding            Boolean?          @default(false)
  // Media
  images                  Json // JSON field to store an array of objects
  BidRoom                 BidRoom[]
  sold                    Boolean?          @default(false)
  rank                    Int               @default(0)
  views                   Int               @default(0)
  likes                   Int               @default(0)

  @@index([type, breed, price]) // Index for efficient queries
}

model Sessions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  expiry    DateTime
  createdAt DateTime @default(now())
}

model Bids {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  intial       Boolean? @default(false)
  bidRoomId    String?  @db.ObjectId
  userId       String?  @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id])
  price        Float
  isFinalOffer Boolean  @default(false)
  createdAt    DateTime @default(now())
  BidRoom      BidRoom? @relation(fields: [bidRoomId], references: [id])
  isSeen       Boolean  @default(false)
}

model BidRoom {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  key                     String?           @unique
  animalId                String?           @db.ObjectId
  animal                  Animal?           @relation(fields: [animalId], references: [id])
  userId                  String            @db.ObjectId
  user                    User?             @relation(fields: [userId], references: [id])
  authorId                String            @db.ObjectId // ID of the user who created the room
  author                  User?             @relation("BidRoomAuthor", fields: [authorId], references: [id])
  demandId                String?           @db.ObjectId
  activeUsers             String[]
  bids                    Bids[]
  createdAt               DateTime          @default(now())
  offer                   Float
  deliveryOptions         DeliveryOptions[]
  maleQuantityAvailable   Int
  femaleQuantityAvailable Int
  closedAt                DateTime?
  closedAmount            Float?
  userOfferAccepted       Boolean?          @default(false)
}

model BusinessProtocol {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeliveryOptions {
  SELF_PICKUP
  SELLER_DELIVERY
}
